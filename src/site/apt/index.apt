	-----
	SemiSpace
    -----
    Erlend Nossum
    -----
	

~~ Guide to the apt format
~~ http://maven.apache.org/doxia/references/apt-format.html
~~ http://maven.apache.org/guides/mini/guide-snippet-macro.html
~~~~~~~~~~~~~~~~~~~~


  <<NOTICE: This document is OLD and need to be revised.>>

  SemiSpace is a light weight Open Source interpretation of
  <<{{{http://www.wikipedia.org/wiki/tuple_space}Tuple Space / Object Space}}>> 
  based on ideas from 
  <<{{{http://www.jini.org/wiki/JavaSpaces_Specification}JavaSpaces}}.>>
  It can be run as single, <<stand alone,>> spac.

  Please see the 
  {{{semispace-main/semispace-book}SemiSpace book}}
  for in-depth information about installation and usage.

 Other information:
 
 * Tutorials and examples are included. You find them in
  {{{semispace-tutorials/index.html}the tutorials project}}, and
  the description in the {{{semispace-main/semispace-book}SemiSpace book.}}
  
 * Problems and limitations as far as they are known are listed
  {{{semispace-main/semispace-book/beware.html}in a chapter in 
  the book.}}
  
 * The documentation for the 
  current snapshot version: \
  {{{../semispace-1.3.2-SNAPSHOT/}semispace-1.3.2-SNAPSHOT}}

 * {{{./changes.html}Changelist}} since version 1.0.0. 

 []

~~~~~~~~~~~~~~~~
SemiSpace offers
~~~~~~~~~~~~~~~~

 ... a light weight JavaSpaces inspired tuple space which
 
 * is <<non-intrusive>>: You do not need to change existing code

 * easy to <<configure>>: {{{http://www.springframework.org}Spring}}-based configuration

 * has very <<few dependencies>>: Basically just {{{semispace-main/dependencies.html}XStream and logging}}

 * easy to <<integrate>> into your J2EE or stand alone applications: You should easily be able to slip it into your standard J2EE stack

 * supports <<generics>> for ease of usage

 * <<does not need Jini>> installed ... as SemiSpace do not use Jini.
 
 * uses <<getters>> in addition to public fields: In difference to the JavaSpaces specification 
 
 * does <<not>> use the <<<Entry>>> mix-in interface: Allows any {{{http://xstream.codehaus.org}XStream}}-able class to be put into the space. 
 
 * is <<Open Source>> and licensed under {{{http://www.apache.org/licenses/LICENSE-2.0}Apache 2}}

 * supplies a simple <<actor pattern>> framework

 * a {{{http://www.cometd.org/}cometd-based}} interface to a SemiSpace-enabled webapp

 []


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Accessing the repository directly
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 In order to obtain snapshot versions, or just a direct download of 
 the packages, add the following to your pom:
 


~~~~~~~~~~~~
Alternatives
~~~~~~~~~~~~

  JavaSpace alternatives are:
  
  * The JavaSpace implementation Sun offers as a part of {{{http://jini.org}Jini}}
  
  * {{{http://www.dancres.org/blitz/}Blitz}} 
  
  * {{{http://www.gigaspaces.com/}GigaSpaces}}

  * {{{http://incubator.apache.org/river/}Apache River}}

  * {{{http://lime.sourceforge.net/Lime/index.html}Lime}}
  
  * {{{http://www.almaden.ibm.com/cs/TSpaces/}IBM TSpaces}}

  * {{{http://gruple.codehaus.org/}Gruple}}

  * {{{http://code.google.com/p/terrastore/}Terrastore}}

  []
